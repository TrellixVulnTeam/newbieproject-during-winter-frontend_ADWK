{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\newbieproject\\\\frontend\\\\newbieproject-during-winter-frontend\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\n// import {BrowserRouter, Routes, Route} from 'react-router-dom';\n// import './App.css';\n// import WritePage from './pages/write';\n// import ListPage from './pages/list';\n// import MainPage from './pages/main';\n// import styled from 'styled-components';\n// import React from \"react\";\n// function App() {\n//   return (\n//     <AppStyled>\n//     <div className='App'>     \n//       <BrowserRouter>\n//       <Routes>\n//         <Route path='/main' element={<MainPage />} />\n//         <Route path='/write' element={<WritePage />} />\n//         <Route path='/list' element={<ListPage />} />\n//       </Routes>\n//     </BrowserRouter>   \n//     </div>\n//     </AppStyled> \n//   );\n// }\n// const AppStyled = styled.div`\n//   width: 100%;\n//   background-color: var(--bg);\n// `;\n// export default App;\nimport React, { useState, useEffect } from 'react';\nimport styled, { ThemeProvider } from \"styled-components\";\nimport WebFont from 'webfontloader';\nimport { GlobalStyles } from './theme/GlobalStyles.js';\nimport { useTheme } from './theme/useTheme'; // 2: Create a cotainer\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  margin: 5px auto 5px auto;\n`;\n_c = Container;\n\nfunction App() {\n  _s();\n\n  // 3: Get the selected theme, font list, etc.\n  const {\n    theme,\n    themeLoaded,\n    getFonts\n  } = useTheme();\n  const [selectedTheme, setSelectedTheme] = useState(theme);\n  useEffect(() => {\n    setSelectedTheme(theme);\n  }, [themeLoaded]); // 4: Load all the fonts\n\n  useEffect(() => {\n    WebFont.load({\n      google: {\n        families: getFonts()\n      }\n    });\n  }); // 5: Render if the theme is loaded.\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: themeLoaded && /*#__PURE__*/_jsxDEV(ThemeProvider, {\n      theme: selectedTheme,\n      children: [/*#__PURE__*/_jsxDEV(GlobalStyles, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        style: {\n          fontFamily: selectedTheme.font\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Theme Builder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"This is a theming system with a Theme Switcher and Theme Builder. Do you want to see the source code? \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"https://github.com/atapas/theme-builder\",\n            target: \"_blank\",\n            children: \"Click here.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 49\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 22\n    }, this)\n  }, void 0, false);\n}\n\n_s(App, \"sDKf631li/s9Ma6wvvRyej/44Yc=\", false, function () {\n  return [useTheme];\n});\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["C:/Users/user/Desktop/newbieproject/frontend/newbieproject-during-winter-frontend/src/App.js"],"names":["React","useState","useEffect","styled","ThemeProvider","WebFont","GlobalStyles","useTheme","Container","div","App","theme","themeLoaded","getFonts","selectedTheme","setSelectedTheme","load","google","families","fontFamily","font"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,IAAiBC,aAAjB,QAAsC,mBAAtC;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,SAASC,YAAT,QAA6B,yBAA7B;AACA,SAAQC,QAAR,QAAuB,kBAAvB,C,CAEA;;;;AACA,MAAMC,SAAS,GAAGL,MAAM,CAACM,GAAI;AAC7B;AACA,CAFA;KAAMD,S;;AAIN,SAASE,GAAT,GAAe;AAAA;;AACb;AACA,QAAM;AAACC,IAAAA,KAAD;AAAQC,IAAAA,WAAR;AAAqBC,IAAAA;AAArB,MAAiCN,QAAQ,EAA/C;AACA,QAAM,CAACO,aAAD,EAAgBC,gBAAhB,IAAoCd,QAAQ,CAACU,KAAD,CAAlD;AAEAT,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,gBAAgB,CAACJ,KAAD,CAAhB;AACA,GAFO,EAEL,CAACC,WAAD,CAFK,CAAT,CALa,CASb;;AACAV,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,OAAO,CAACW,IAAR,CAAa;AACXC,MAAAA,MAAM,EAAE;AACNC,QAAAA,QAAQ,EAAEL,QAAQ;AADZ;AADG,KAAb;AAKD,GANQ,CAAT,CAVa,CAkBb;;AACA,sBACE;AAAA,cAEED,WAAW,iBAAI,QAAC,aAAD;AAAe,MAAA,KAAK,EAAGE,aAAvB;AAAA,8BACb,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,cADa,eAEb,QAAC,SAAD;AAAW,QAAA,KAAK,EAAE;AAACK,UAAAA,UAAU,EAAEL,aAAa,CAACM;AAA3B,SAAlB;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,4IAEsC;AAAG,YAAA,IAAI,EAAC,yCAAR;AAAkD,YAAA,MAAM,EAAC,QAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFtC;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFa;AAAA;AAAA;AAAA;AAAA;AAAA;AAFjB,mBADF;AAgBD;;GAnCQV,G;UAEgCH,Q;;;MAFhCG,G;AAqCT,eAAeA,GAAf","sourcesContent":["// import {BrowserRouter, Routes, Route} from 'react-router-dom';\n// import './App.css';\n// import WritePage from './pages/write';\n// import ListPage from './pages/list';\n// import MainPage from './pages/main';\n// import styled from 'styled-components';\n// import React from \"react\";\n\n// function App() {\n//   return (\n//     <AppStyled>\n//     <div className='App'>     \n      \n//       <BrowserRouter>\n//       <Routes>\n//         <Route path='/main' element={<MainPage />} />\n//         <Route path='/write' element={<WritePage />} />\n//         <Route path='/list' element={<ListPage />} />\n//       </Routes>\n//     </BrowserRouter>   \n//     </div>\n//     </AppStyled> \n//   );\n// }\n\n// const AppStyled = styled.div`\n//   width: 100%;\n//   background-color: var(--bg);\n// `;\n// export default App;\nimport React, { useState, useEffect } from 'react';\nimport styled, { ThemeProvider } from \"styled-components\";\nimport WebFont from 'webfontloader';\nimport { GlobalStyles } from './theme/GlobalStyles.js';\nimport {useTheme} from './theme/useTheme';\n\n// 2: Create a cotainer\nconst Container = styled.div`\n  margin: 5px auto 5px auto;\n`;\n\nfunction App() {\n  // 3: Get the selected theme, font list, etc.\n  const {theme, themeLoaded, getFonts} = useTheme();\n  const [selectedTheme, setSelectedTheme] = useState(theme);\n\n  useEffect(() => {\n    setSelectedTheme(theme);\n   }, [themeLoaded]);\n\n  // 4: Load all the fonts\n  useEffect(() => {\n    WebFont.load({\n      google: {\n        families: getFonts()\n      }\n    });\n  });\n\n  // 5: Render if the theme is loaded.\n  return (\n    <>\n    {\n      themeLoaded && <ThemeProvider theme={ selectedTheme }>\n        <GlobalStyles/>\n        <Container style={{fontFamily: selectedTheme.font}}>\n          <h1>Theme Builder</h1>\n          <p>\n            This is a theming system with a Theme Switcher and Theme Builder.\n            Do you want to see the source code? <a href=\"https://github.com/atapas/theme-builder\" target=\"_blank\">Click here.</a>\n          </p>\n        </Container>\n      </ThemeProvider>\n    }\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}